// controllers/auth/requestOTP.js
import { generateOTP } from "../../utils/helper.js";
import { validateRequest } from "../../utils/validate.js";
import { otpRequestSchema } from "../../utils/schemas.js";
import db from "../../config/db.js";

export const requestOTP = async (req, res) => {
  try {
    const value = validateRequest(req.body, otpRequestSchema);
    const { mobile } = value;

    const otp = generateOTP();
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 mins

    await db.query(
      "INSERT INTO otp_requests (mobile, otp, expires_at) VALUES (?, ?, ?)",
      [mobile, otp, expiresAt]
    );

    console.log(`OTP for ${mobile}: ${otp}`); // Later use Twilio here

    res.status(200).json({ message: "OTP sent successfully" });
  } catch (err) {
    console.error(err);
    if (err.errors) return res.status(err.status || 400).json({ errors: err.errors });
    res.status(500).json({ message: "Server error" });
  }
};


//
// controllers/auth/verifyOTP.js
import db from "../../config/db.js";

export const verifyOTP = async (req, res) => {
  try {
    const { mobile, otp } = req.body;

    const [rows] = await db.query(
      "SELECT * FROM otp_requests WHERE mobile = ? ORDER BY id DESC LIMIT 1",
      [mobile]
    );

    if (!rows.length) return res.status(400).json({ message: "OTP not found" });

    const otpRecord = rows[0];
    if (otpRecord.otp !== otp) return res.status(400).json({ message: "Invalid OTP" });

    if (new Date() > new Date(otpRecord.expires_at))
      return res.status(400).json({ message: "OTP expired" });

    res.status(200).json({ message: "OTP verified successfully" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
};


//

// controllers/auth/signup.js
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import db from "../../config/db.js";

const JWT_SECRET = process.env.JWT_SECRET;

export const signup = async (req, res) => {
  try {
    const { user_name, mobile, password, device_id, device_token, device_type } = req.body;

    // Check if OTP verified recently
    const [rows] = await db.query(
      "SELECT * FROM otp_requests WHERE mobile = ? ORDER BY id DESC LIMIT 1",
      [mobile]
    );
    if (!rows.length) return res.status(400).json({ message: "OTP not requested" });

    const otpRecord = rows[0];
    if (new Date() > new Date(otpRecord.expires_at))
      return res.status(400).json({ message: "OTP expired" });

    const hashedPassword = await bcrypt.hash(password, 10);

    await db.query(
      `INSERT INTO users (user_name, mobile, password, device_id, device_token, device_type)
       VALUES (?, ?, ?, ?, ?, ?)`,
      [user_name, mobile, hashedPassword, device_id, device_token, device_type]
    );

    const token = jwt.sign({ mobile }, JWT_SECRET, { expiresIn: "7d" });

    // Send cookie for web + return token for mobile
    res
      .cookie("token", token, {
        httpOnly: true,
        secure: true,
        sameSite: "strict",
      })
      .status(201)
      .json({
        message: "Signup successful",
        token, // mobile can use this
      });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
};


//

// controllers/auth/login.js
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import db from "../../config/db.js";

const JWT_SECRET = process.env.JWT_SECRET;

export const login = async (req, res) => {
  try {
    const { mobile, password } = req.body;

    const [rows] = await db.query("SELECT * FROM users WHERE mobile = ?", [mobile]);
    if (!rows.length) return res.status(400).json({ message: "User not found" });

    const user = rows[0];
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Invalid credentials" });

    const token = jwt.sign({ mobile }, JWT_SECRET, { expiresIn: "7d" });

    res
      .cookie("token", token, { httpOnly: true, secure: true, sameSite: "strict" })
      .status(200)
      .json({ message: "Login successful", token });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
};



//